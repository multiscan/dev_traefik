# https://containo.us/blog/traefik-2-0-docker-101-fc2893944b9d/
# https://hub.docker.com/r/containous/whoami
# This will create 5 identical whoami instances each with a different traefik 
# frontend rule to show how to select based on domain name or on prefix path
# curl 'https://whoami1.#{DEV_DOMAIN}/'    -> whoami1
# curl 'https://whoami2.#{DEV_DOMAIN}/'    -> whoami2
# curl 'https://whoami3.#{DEV_DOMAIN}/'    -> whoami3
# curl 'https://whoami3.#{DEV_DOMAIN}/a/'  -> whoami4
# curl 'https://whoami3.#{DEV_DOMAIN}/b/'  -> whoami5
# echo "ciao" | ncat --ssl echo.dev.jkldsa.com 9090  -> echo
# echo "ciao" | ncat --ssl tr.dev.jkldsa.com 9090    -> trcase
# # socat version does not work because it does not support SNI
# # echo "ciao" | socat openssl:echo.dev.jkldsa.com:9090 stdio
# # The non SSL version cannot work because HostSNI is an extension of the TLS protocol. 
# # echo "ciao" | nc echo.#{DEV_DOMAIN} 9090 -> echo
# # echo "ciao" | socat tcp:localhost:1234 stdio    
# make down ; make up ; sleep 5; curl http://localhost:8080/api/rawdata | jq
#
version: '3'
services:
  whoami1:
    image: containous/whoami
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.whoami1.rule=Host("whoami1.${DEV_DOMAIN}")
      - traefik.http.routers.whoami1.tls=true
      - traefik.http.services.whoami1.loadbalancer.server.port=80
      # - traefik.http.routers.whoami1.tls.certificates.certFile=/certs/fullchain.pem
      # - traefik.http.routers.whoami1.tls.certificates.keyFile=/certs/privkey.pem
    networks:
      - traefik
      - default

  whoami2:
    image: containous/whoami
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.whoami2.rule=Host("whoami2.${DEV_DOMAIN}") || Host("whoami2a.${DEV_DOMAIN}")
      - traefik.http.routers.whoami2.tls=true
      - traefik.http.routers.whoami2.service=whoami2
      - traefik.http.services.whoami2.loadbalancer.server.port=80
      # In case there is a second service in the same container (although here it is the same port...)
      - traefik.http.routers.whoami2b.rule=Host("whoami2b.${DEV_DOMAIN}")
      - traefik.http.routers.whoami2b.tls=true
      - traefik.http.routers.whoami2b.service=whoami2b
      - traefik.http.services.whoami2b.loadbalancer.server.port=80
    networks:
      - traefik
      - default

  whoami3:
    image: containous/whoami
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.whoami3.rule=Host("whoami3.${DEV_DOMAIN}")
      - traefik.http.routers.whoami3.tls=true
      - traefik.http.services.whoami3.loadbalancer.server.port=80
    networks:
      - traefik
      - default

  whoami4:
    image: containous/whoami
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.whoami4.rule=Host("whoami3.${DEV_DOMAIN}") && PathPrefix("/a")
      - traefik.http.routers.whoami4.middlewares=strip_a
      - traefik.http.routers.whoami4.tls=true
      - traefik.http.services.whoami4.loadbalancer.server.port=80
      - traefik.http.middlewares.strip_a.stripprefix.prefixes=/a/
    networks:
      - traefik
      - default

  whoami5:
    image: containous/whoami
    environment:
      WHOAMI_NAME: whoami3_subpath_b
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.whoami5.rule=Host("whoami3.${DEV_DOMAIN}") && PathPrefix("/b")
      - traefik.http.routers.whoami5.middlewares=strip_b
      - traefik.http.routers.whoami5.tls=true
      - traefik.http.services.whoami5.loadbalancer.server.port=80
      - traefik.http.middlewares.strip_b.stripprefix.prefixes=/b/
    networks:
      - traefik
      - default

  echo:
    image: alpine/socat
    command: -v tcp-l:1234,fork exec:'/bin/cat'
    labels:
      - traefik.docker.network=traefik
      - traefik.tcp.routers.echo.rule=HostSNI("echo.${DEV_DOMAIN}")
      - traefik.tcp.services.echo.loadbalancer.server.port=1234
      - traefik.tcp.routers.echo.tls=true
      # - traefik.tcp.routers.echo.entryPoints=["other"] 
    networks:
      - traefik
      - default

  trcase:
    image: alpine/socat
    command: -v tcp-l:1234,fork exec:'tr a-z A-Z'
    labels:
      - traefik.docker.network=traefik
      - traefik.tcp.routers.tr.rule=HostSNI("tr.${DEV_DOMAIN}")
      - traefik.tcp.services.tr.loadbalancer.server.port=1234
      - traefik.tcp.routers.tr.tls=true
      # - traefik.tcp.routers.echo.entryPoints=["other"] 
    networks:
      - traefik
      - default

  wssecho:
    build: wssecho
    labels:
      - traefik.docker.network=traefik
      - traefik.http.routers.wssecho.rule=Host("wssecho.${DEV_DOMAIN}")
      - traefik.http.routers.wssecho.tls=true
      - traefik.http.services.wssecho.loadbalancer.server.port=8080
      - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https
    networks:
      - traefik
      - default

# An external network so the same traefik can be use for different project (all sharing ports 80,443)
# This has to be created by hand otherwise the name is not correct
networks:
  traefik:
    external: true
